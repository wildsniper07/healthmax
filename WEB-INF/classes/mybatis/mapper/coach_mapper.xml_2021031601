<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.healthmax.biogram.mapper.CoachMapper">

	<!-- 90일 밸런스 링 현황조회 -->
	<select id="selectBalncRing90DaysList" parameterType="hmap" resultType="hmap">
		<![CDATA[
		SELECT
		       DT.DATE COACH_DE
		     , CASE WHEN ROUND(IFNULL(MEAL_RATE, 100), 0) - ROUND(IFNULL(SPORTS_RATE, 0), 0) > 100 THEN 0
		            WHEN ROUND(IFNULL(MEAL_RATE, 100), 0) - ROUND(IFNULL(SPORTS_RATE, 0), 0) < 0   THEN 100
		            ELSE 100 - (ROUND(IFNULL(MEAL_RATE, 100), 0) - ROUND(IFNULL(SPORTS_RATE, 0), 0)) 
		        END BALNC_RING_SCORE
		     , IFNULL(MEAL_RATE, 0) MEAL_RATE
		     , IFNULL(SPORTS_RATE, 0) SPORTS_RATE
		  FROM (
		        SELECT 
		               DATE_FORMAT(DATE, '%Y%m%d') DATE
		          FROM CALENDAR_DATA
		         WHERE DATE BETWEEN DATE_FORMAT(DATE_ADD(DATE_ADD(NOW(), INTERVAL -90 DAY), INTERVAL-(DAYOFWEEK(DATE_ADD(NOW(), INTERVAL -90 DAY))-1    ) DAY),"%Y%m%d")  
		        		        AND DATE_FORMAT(DATE_ADD(NOW(), INTERVAL (7 - (DAYOFWEEK(NOW()))) DAY),"%Y%m%d")
		     ) DT
		  LEFT JOIN (
		          SELECT 
		                 MBER_NO
		               , SUBSTRING(MEAL_DT, 1, 8) MEAL_DE
		               , MAX(RECMND_CALORIE) RECMND_CALORIE
		               , SUM(MEAL_CALORIE) MEAL_CALORIE
		               , ROUND(SUM(MEAL_CALORIE) / ROUND(MAX(RECMND_CALORIE) * 0.01, 2), 1) MEAL_RATE
		            FROM MBER_MEAL_DIARY
		           WHERE MBER_NO = #{MBER_NO}
		             AND DATEDIFF(NOW(), MEAL_DT) <= 90 
		             AND USE_AT = 'Y'
		           GROUP BY MBER_NO, SUBSTRING(MEAL_DT, 1, 8)
		     ) MC
		    ON DT.DATE = MC.MEAL_DE
		  LEFT JOIN (
		          SELECT
		                 MBER_NO
		               , SPORTS_EXECUT_DE
		               , MAX(GOAL_CNSMP_CALORIE) GOAL_CNSMP_CALORIE
		               , SUM(SPORTS_EXECUT_CALORIE) SPORTS_EXECUT_CALORIE
		               , ROUND(SUM(SPORTS_EXECUT_CALORIE) / ROUND(MAX(GOAL_CNSMP_CALORIE) * 0.01, 2), 1) SPORTS_RATE
		            FROM (
		                  SELECT
		                         SEH.MBER_NO
		                       , SEH.SPORTS_EXECUT_DE
		                       , DATEDIFF(NOW(), SPORTS_EXECUT_DE) DAYS
		                       , GOAL_CNSMP_CALORIE
		                       , CASE WHEN SPORTS_EXECUT_CALORIE > 0 THEN SPORTS_EXECUT_CALORIE
		                              ELSE ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND(SEH.TOT_SPORTS_TIME / 60, 0), 0) 
		                          END SPORTS_EXECUT_CALORIE
		                    FROM SPORTS_EXECUT_HIST SEH
		                   INNER JOIN SPORTS_INFO SI
		                      ON SEH.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		                     AND SEH.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		                     AND SEH.SPORTS_SN = SI.SPORTS_SN
		                   WHERE SEH.MBER_NO = #{MBER_NO}
		                     AND SEH.USE_AT = 'Y'
		                   UNION ALL
	                      SELECT
	                             MBER_NO
	                           , SPORTS_EXECUT_DE
	                           , DATEDIFF(NOW(), SPORTS_EXECUT_DE) DAYS
	                           , #{GOAL_CNSMP_CALORIE} GOAL_CNSMP_CALORIE
	                           , SPORTS_EXECUT_CALORIE
	                        FROM (
	                              SELECT 
	          		                       MBER_NO
	          		                     , SUBSTRING(MESURE_BGNDT, 1, 8) SPORTS_EXECUT_DE
	          		                     , ROUND(IFNULL(MAX(CNSMP_CALORIE), 0), 0) SPORTS_EXECUT_CALORIE
	          		                  FROM MESURE_INFO_ACTV_TRCK
	          		                 WHERE MBER_NO = #{MBER_NO}
	          		                 GROUP BY MBER_NO, SUBSTRING(MESURE_BGNDT, 1, 8)
	                           ) MIAT
		               ) SEH
		           WHERE DAYS <= 90
		           GROUP BY MBER_NO, SPORTS_EXECUT_DE
		     ) SC
		    ON DT.DATE = SC.SPORTS_EXECUT_DE
		 ORDER BY DT.DATE DESC
    	]]>
	</select>
	
	<!-- 조회일자 기준 밸런스 링 정보 조회 -->
	<select id="selectBalncRingInfo" parameterType="hmap" resultType="hmap">
		<![CDATA[
		SELECT
		       CASE WHEN ROUND(IFNULL(MEAL_RATE, 100), 0) - ROUND(IFNULL(SPORTS_RATE, 0), 0) > 100 THEN 0
		            WHEN ROUND(IFNULL(MEAL_RATE, 100), 0) - ROUND(IFNULL(SPORTS_RATE, 0), 0) < 0   THEN 100
		            ELSE 100 - (ROUND(IFNULL(MEAL_RATE, 100), 0) - ROUND(IFNULL(SPORTS_RATE, 0), 0)) 
		        END BALNC_RING_SCORE
		     , IFNULL(RECMND_CALORIE, #{RECMND_CALORIE}) RECMND_CALORIE
		     , IFNULL(MEAL_CALORIE, 0) MEAL_CALORIE
		     , IFNULL(MEAL_RATE, 0) MEAL_RATE
		     , IFNULL(GOAL_CNSMP_CALORIE, #{GOAL_CNSMP_CALORIE}) GOAL_CNSMP_CALORIE
		     , IFNULL(SPORTS_EXECUT_CALORIE, 0) SPORTS_EXECUT_CALORIE
		     , IFNULL(SPORTS_RATE, 0) SPORTS_RATE
		  FROM MBER_INFO MI
		  LEFT JOIN (
		           SELECT 
		                 MBER_NO
		               , SUBSTRING(MEAL_DT, 1, 8) MEAL_DE
		               , MAX(RECMND_CALORIE) RECMND_CALORIE
		               , SUM(MEAL_CALORIE) MEAL_CALORIE
		               , ROUND(SUM(MEAL_CALORIE) / ROUND(MAX(RECMND_CALORIE) * 0.01, 2), 1) MEAL_RATE
		            FROM MBER_MEAL_DIARY
		           WHERE MBER_NO = #{MBER_NO}
		             AND MEAL_DT LIKE CONCAT(#{COACH_DE}, '%')
		             AND USE_AT = 'Y'
		           GROUP BY MBER_NO, SUBSTRING(MEAL_DT, 1, 8)
		     ) MC
		    ON MI.MBER_NO = MC.MBER_NO
		  LEFT JOIN (
		          SELECT
		                 MBER_NO
		               , SPORTS_EXECUT_DE
		               , MAX(GOAL_CNSMP_CALORIE) GOAL_CNSMP_CALORIE
		               , SUM(SPORTS_EXECUT_CALORIE) SPORTS_EXECUT_CALORIE
		               , ROUND(SUM(SPORTS_EXECUT_CALORIE) / ROUND(MAX(GOAL_CNSMP_CALORIE) * 0.01, 2), 1) SPORTS_RATE
		            FROM (
		                  SELECT
		                         SEH.MBER_NO
		                       , SEH.SPORTS_EXECUT_DE
		                       , DATEDIFF(NOW(), SPORTS_EXECUT_DE) DAYS
		                       , GOAL_CNSMP_CALORIE
		                       , CASE WHEN SPORTS_EXECUT_CALORIE > 0 THEN SPORTS_EXECUT_CALORIE
		                              ELSE ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND(SEH.TOT_SPORTS_TIME / 60, 0), 0) 
		                          END SPORTS_EXECUT_CALORIE
		                    FROM SPORTS_EXECUT_HIST SEH
		                   INNER JOIN SPORTS_INFO SI
		                      ON SEH.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		                     AND SEH.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		                     AND SEH.SPORTS_SN = SI.SPORTS_SN
		                   WHERE SEH.MBER_NO = #{MBER_NO}
		                     AND SEH.USE_AT = 'Y'
		                     AND SEH.SPORTS_EXECUT_DE = #{COACH_DE}
		                   UNION ALL
	                      SELECT
	                             MBER_NO
	                           , SPORTS_EXECUT_DE
	                           , DATEDIFF(NOW(), SPORTS_EXECUT_DE) DAYS
	                           , #{GOAL_CNSMP_CALORIE} GOAL_CNSMP_CALORIE
	                           , SPORTS_EXECUT_CALORIE
	                        FROM (
	                              SELECT 
	          		                       MBER_NO
	          		                     , SUBSTRING(MESURE_BGNDT, 1, 8) SPORTS_EXECUT_DE
	          		                     , ROUND(IFNULL(MAX(CNSMP_CALORIE), 0), 0) SPORTS_EXECUT_CALORIE
	          		                  FROM MESURE_INFO_ACTV_TRCK
	          		                 WHERE MBER_NO = #{MBER_NO}
	          		                   AND MESURE_BGNDT LIKE CONCAT(#{COACH_DE}, '%')
	          		                 GROUP BY MBER_NO, SUBSTRING(MESURE_BGNDT, 1, 8)
	                           ) MIAT
		               ) SEH
		           GROUP BY MBER_NO, SPORTS_EXECUT_DE
		     ) SC
		    ON MI.MBER_NO = SC.MBER_NO
		 WHERE MI.MBER_NO = #{MBER_NO}
		 ]]>
	</select>
	
	<!-- 조회일자 기준 타임라인 현황 조회 -->
	<select id="selectTimeLineInfoList" parameterType="hmap" resultType="hmap">
		SELECT 
		       MBER_NO
		     , PROGRM_SE_CODE SE_CODE
		     , F_CODE_NM('MCSS', PROGRM_SE_CODE, #{LOCALE}) SE_CODE_NM
		     , DATE_FORMAT(MAX(REGIST_DT), '%H:%i') EXECUT_TIME
		     , CONCAT('-', F_STR_FORMAT('NUM', SUM(SPORTS_EXECUT_CALORIE), #{LOCALE})) EXECUT_CALORIE
		     , TIME_FORMAT(SEC_TO_TIME(SUM(SPORTS_EXECUT_TIME)), '%i:%s') REMARK
		  FROM SPORTS_EXECUT_HIST
		 WHERE 1=1
		   AND MBER_NO = #{MBER_NO}
		   AND USE_AT = 'Y'
		   AND SPORTS_EXECUT_DE = #{COACH_DE}
		   AND PROGRM_SE_CODE = 'TS'
		 GROUP BY MBER_NO, SPORTS_EXECUT_DE, PROGRM_SE_CODE
		HAVING SUM(SPORTS_SET) = SUM(PRSCRPTN_SET) 
		   AND COUNT(*) = 3
		 UNION ALL
		SELECT 
		       SEH.MBER_NO
		     , SEH.PROGRM_SE_CODE SE_CODE
		     , CONCAT(F_CODE_NM('MCSS', SEH.PROGRM_SE_CODE, #{LOCALE}), '_', MAX(SP.PROGRM_NM)) SE_CODE_NM
		     , DATE_FORMAT(MAX(SEH.REGIST_DT), '%H:%i') EXECUT_TIME
		     , CONCAT('-', F_STR_FORMAT('NUM', SUM(SEH.SPORTS_EXECUT_CALORIE), #{LOCALE})) EXECUT_CALORIE
		     , TIME_FORMAT(SEC_TO_TIME(SUM(SEH.SPORTS_EXECUT_TIME)), '%i:%s') REMARK
		  FROM SPORTS_EXECUT_HIST SEH
		 INNER JOIN SPORTS_PROGRM SP
		    ON SEH.PROGRM_SE_CODE = SP.PROGRM_SE_CODE
		   AND SEH.PROGRM_PURPS_CODE = SP.PROGRM_PURPS_CODE
		   AND SEH.PROGRM_SN = SP.PROGRM_SN
		 WHERE SEH.MBER_NO = #{MBER_NO}
		   AND SEH.USE_AT = 'Y'
		   AND SEH.SPORTS_EXECUT_DE = #{COACH_DE}
		   AND SEH.PROGRM_SE_CODE = 'TM'
		 GROUP BY SEH.MBER_NO, SEH.SPORTS_EXECUT_DE, SEH.PROGRM_SE_CODE, SEH.PROGRM_PURPS_CODE, SEH.PROGRM_SN
		 UNION ALL
		SELECT 
		       MMD.MBER_NO
		     , MMD.MEAL_SE_CODE 
		     , F_CODE_NM('CM12', MMD.MEAL_SE_CODE, #{LOCALE}) MEAL_SE_CODE_NM
		     , DATE_FORMAT(MIN(MMD.MEAL_DT), '%H:%i') MEAL_DT
		     , CONCAT(F_STR_FORMAT('NUM', SUM(MMD.MEAL_CALORIE), #{LOCALE})) MEAL_CALORIE
		     , GROUP_CONCAT(MENU SEPARATOR ',') REMARK
		  FROM MBER_MEAL_DIARY MMD
	      LEFT JOIN (
	          SELECT 
	                 MBER_NO
	               , MEAL_DT
	               , GROUP_CONCAT(FD_NM SEPARATOR ',') MENU
	            FROM MBER_MEAL_MENU
	           WHERE MBER_NO = #{MBER_NO}
	             AND FD_NM != '음식아님'
	           GROUP BY MBER_NO, MEAL_DT
	         ) MMM
	        ON MMD.MBER_NO = MMM.MBER_NO
	       AND MMD.MEAL_DT = MMM.MEAL_DT
		 WHERE MMD.MBER_NO = #{MBER_NO}
		   AND MMD.MEAL_DT LIKE CONCAT(#{COACH_DE}, '%')
		   AND MMD.USE_AT = 'Y'
		 GROUP BY MMD.MBER_NO, MMD.MEAL_SE_CODE
		 UNION ALL
		SELECT
		       MBER_NO
		     , MESUER_CODE
		<choose>
			<when test='LOCALE != null and LOCALE.equals("US")'>
		 		    , 'SETP' MESUER_CODE_NM
			</when>
			<when test='LOCALE != null and LOCALE.equals("ES")'>
		 			, 'SETP' MESUER_CODE_NM
			</when>
			<when test='LOCALE != null and LOCALE.equals("ID")'>
		  			, 'SETP' MESUER_CODE_NM
			</when>
			<otherwise>
	    			, '걷기(달리기)' MESUER_CODE_NM
			</otherwise>
		</choose>
		     , DATE_FORMAT(MAX(MESURE_BGNDT), '%H:%i') MESURE_BGNDT
		     , CONCAT('-', F_STR_FORMAT('NUM', MAX(CNSMP_CALORIE), #{LOCALE})) CNSMP_CALORIE
		     , CONCAT(F_STR_FORMAT('NUM', MAX(SPORTS_STEP), #{LOCALE}), ' step / ', ROUND(MAX(SPORTS_DSTNC)/1000, 1), ' km') REMARK
		  FROM (
		        SELECT 
		               MBER_NO
		             , 'STEP' MESUER_CODE
		             , CNSMP_CALORIE
		             , CAST(MESURE_DATA AS UNSIGNED) SPORTS_STEP
		             , SPORTS_DSTNC
		             , FIRST_TIME
		             , MESURE_BGNDT
		             , TIMES
		             , CAST(TIMEDIFF(MESURE_BGNDT, FIRST_TIME) AS CHAR) SPORTS_TIME
		             , IF(TIMES = 0, @RN := 1, @RN := @RN + 1) RN
		             , IF(@PRE_FIRST_TIME != FIRST_TIME, @RN_GROUP := @RN_GROUP + 1, @RN_GROUP) RN_GROUP
		             , IF(@PRE_FIRST_TIME != FIRST_TIME, @PRE_FIRST_TIME := FIRST_TIME, @PRE_FIRST_TIME)
		          FROM (
		                SELECT
		                       MBER_NO
		                     , HOUR(MESURE_BGNDT) HOURS
		                     , TRUNCATE(HOUR(MESURE_BGNDT) % 6, 0) TIMES    
		                     , IF(@FIRST_TIME IS NULL, @FIRST_TIME := MESURE_BGNDT, NULL) A
		                     , IF(TRUNCATE(HOUR(MESURE_BGNDT) % 6, 0) = 0, @PRE_TIME := NULL, IF(@PRE_TIME IS NULL, @PRE_TIME := MESURE_BGNDT, NULL)) B
		                     , IF(@PRE_TIME = MESURE_BGNDT AND MESURE_BGNDT != @FIRST_TIME, @FIRST_TIME := MESURE_BGNDT, NULL) C
		                     , IFNULL(@PRE_TIME, @FIRST_TIME) FIRST_TIME
		                     , MESURE_BGNDT   
		                     , MESURE_DATA
		                     , SPORTS_TIME
		                     , SPORTS_DSTNC
		                     , CNSMP_CALORIE
		                  FROM MESURE_INFO_ACTV_TRCK A
		                 INNER JOIN (SELECT @FIRST_TIME := NULL, @PRE_TIME := NULL) R
		                 WHERE MBER_NO = #{MBER_NO}
		                   AND MESURE_CODE = '4010'
		                   AND MESURE_BGNDT LIKE CONCAT(#{COACH_DE}, '%')
		                 ORDER BY MESURE_BGNDT ASC
		             ) MIAT
		         INNER JOIN (SELECT @RN := 1, @PRE_FIRST_TIME := '', @RN_GROUP := 0) R
		     ) ACTV
		 GROUP BY MBER_NO, MESUER_CODE, RN_GROUP
		 ORDER BY EXECUT_TIME ASC
	</select>
	
	<!-- 오늘의 코치 현황 조회 -->
	<select id="selectTodayCoachList" parameterType="hmap" resultType="hmap">
		SELECT
		       TCI.TODAY_COACH_NM
		     , IF(MIC.COACH_SE_CODE IS NULL, 'N', 'Y') ACHIV_AT
		     , NULL GOAL_VALUE 
		     , NULL ACHIV_VALUE
		     , NULL ACHIV_RATE
		  FROM (
		        SELECT 
		               COACH_TY_CODE
		             , COACH_SE_CODE
		             , TODAY_COACH_NM
		          FROM TODAY_COACH_INFO
		         WHERE USE_AT = 'Y'
		           AND COACH_TY_CODE = 'MS'
		     ) TCI
		  LEFT JOIN (   
		        SELECT
		               'MS' COACH_TY_CODE
		             , CASE WHEN MESURE_CODE = '6021' THEN '6021'
		                    WHEN MESURE_CODE = '622E' OR MESURE_CODE = '622F' THEN '622E'
		                    WHEN MESURE_CODE = '624A' OR MESURE_CODE = '624B' THEN '624A'
		                    WHEN MESURE_CODE = '624C' OR MESURE_CODE = '624D' OR MESURE_CODE = '624E' OR MESURE_CODE = '624F' THEN '624C'
		                END COACH_SE_CODE
		          FROM MESURE_INFO_CMMN
		         WHERE MBER_NO = #{MBER_NO}
		           AND MESURE_CODE IN ('6021', '622E', '622F', '624A', '624B', '624C', '624D', '624E', '624F')
		           AND MESURE_DT LIKE CONCAT(DATE_FORMAT(NOW(), '%Y%m%d'), '%')
		         GROUP BY COACH_TY_CODE, COACH_SE_CODE
		     ) MIC
		    ON TCI.COACH_TY_CODE = MIC.COACH_TY_CODE
		   AND TCI.COACH_SE_CODE = MIC.COACH_SE_CODE
		 UNION ALL  
		SELECT
		       TODAY_COACH_NM
		     , IF(ROUND(EXECUT_VALUE / (GOAL_VALUE * 0.01), 1) = 100, 'Y', 'N') ACHIV_AT
		     , GOAL_VALUE
		     , EXECUT_VALUE ACHIV_VALUE
		     , ROUND(EXECUT_VALUE / (GOAL_VALUE * 0.01), 1) ACHIV_RATE
		  FROM (
		        SELECT
		               TCI.COACH_TY_CODE
		             , TCI.TODAY_COACH_NM
		             , CASE WHEN TCI.COACH_SE_CODE = 'STEP' AND MIC.GOAL_VALUE IS NULL THEN 10000
		                    WHEN TCI.COACH_SE_CODE = 'TKWT' THEN TCI.GOAL_VALUE
		                    WHEN MIC.GOAL_VALUE IS NULL THEN 0
		                    ELSE TRUNCATE(MIC.GOAL_VALUE, 0)
		                END GOAL_VALUE 
		             , IFNULL(MIC.EXECUT_VALUE, 0) EXECUT_VALUE
		          FROM (
		                SELECT 
		                       COACH_TY_CODE
		                     , COACH_SE_CODE
		                     , TODAY_COACH_NM
		                     , GOAL_VALUE
		                  FROM TODAY_COACH_INFO
		                 WHERE USE_AT = 'Y'
		                   AND COACH_TY_CODE = 'CP'
		             ) TCI
		          LEFT JOIN (   
		                  SELECT
		                         'CP' COACH_TY_CODE
		                       , 'STEP' COACH_SE_CODE
		                       , IFNULL(MEG.GOAL_VALUE, 10000) GOAL_VALUE
		                       , IF(MOBLPHON_STEPS >= SPORTS_TOT_STEPS, MOBLPHON_STEPS, SPORTS_TOT_STEPS) EXECUT_VALUE
		                    FROM MESURE_INFO_CMMN_DALY MICD
		                    LEFT JOIN (
		                            SELECT 
		                                   MBER_NO
		                                 , GOAL_VALUE
		                              FROM MBER_ESTBS_GOAL
		                             WHERE MBER_NO = #{MBER_NO}
		                               AND MESURE_CODE = '4010'
		                       ) MEG
		                      ON MICD.MBER_NO = MEG.MBER_NO
		                   WHERE MICD.MBER_NO = #{MBER_NO}
		                     AND MICD.MESURE_DE = DATE_FORMAT(NOW(), '%Y%m%d')
		                   UNION ALL
		                  SELECT
		                         'CP' COACH_TY_CODE
		                       , 'TKWT' COACH_SE_CODE
		                       , NULL GOAL_VALUE
		                       , SUM(DRKWT_QY) EXECUT_VALUE     
		                    FROM MBER_DRKWT_DIARY
		                   WHERE MBER_NO = #{MBER_NO}
		                     AND DRKWT_DT LIKE CONCAT(DATE_FORMAT(NOW(), '%Y%m%d'), '%')
		                   GROUP BY MBER_NO, SUBSTRING(DRKWT_DT, 1, 8)
		                   UNION ALL
		                  SELECT
		                         'CP' COACH_TY_CODE
		                       , 'TDSP' COACH_SE_CODE
		                       , COUNT(TS.PROGRM_SE_CODE) GOAL_VALUE
		                       , SUM(IF(ES.SPORTS_REGN_CODE IS NULL, 0, 1)) EXECUT_VALUE
		                    FROM (
		                          SELECT 
		                                 SPD.PROGRM_SE_CODE
		                               , SPD.PROGRM_PURPS_CODE
		                               , SPD.PROGRM_SN
		                               , SPD.SPORTS_TY_CODE
		                               , SPD.SPORTS_REGN_CODE
		                               , SPD.SPORTS_SN
		                            FROM SPORTS_PROGRM_DETAIL SPD
		                           INNER JOIN SPORTS_INFO SI
		                              ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		                             AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		                             AND SPD.SPORTS_SN = SI.SPORTS_SN
		                           WHERE SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		                             AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		                             AND SPD.PROGRM_SN = #{PROGRM_SN}
		                             AND SPD.PROGRM_WEEK = #{PROGRM_WEEK}
		                             AND SPD.PROGRM_WIK = #{PROGRM_WIK}
		                             AND SPD.USE_AT = 'Y'
		                             AND SI.USE_AT = 'Y'
		                       ) TS
		                    LEFT JOIN (
		                          SELECT
		                                 SPORTS_TY_CODE
		                               , SPORTS_REGN_CODE
		                               , SPORTS_SN
		                            FROM SPORTS_EXECUT_HIST
		                           WHERE MBER_NO = #{MBER_NO}
		                             AND SPORTS_EXECUT_DE = DATE_FORMAT(NOW(), '%Y%m%d')
		                             AND USE_AT = 'Y'
		                           GROUP BY SPORTS_TY_CODE, SPORTS_REGN_CODE, SPORTS_SN
		                       ) ES
		                      ON TS.SPORTS_TY_CODE = ES.SPORTS_TY_CODE
		                     AND TS.SPORTS_REGN_CODE = ES.SPORTS_REGN_CODE
		                     AND TS.SPORTS_SN = ES.SPORTS_SN
		                   GROUP BY PROGRM_SE_CODE, PROGRM_PURPS_CODE, PROGRM_SN
		             ) MIC
		            ON TCI.COACH_TY_CODE = MIC.COACH_TY_CODE
		           AND TCI.COACH_SE_CODE = MIC.COACH_SE_CODE
		     ) TBL
		 ORDER BY TODAY_COACH_NM ASC
	</select>
	
	<!-- 섭취 칼로리 오늘로 부터 7일 데이터 조회 -->
	<select id="selectMeal7DayCalorieList" parameterType="hmap" resultType="hmap">
		SELECT
		       DATE
		     , IFNULL(MEAL_CALORIE, 0) MEAL_CALORIE
		     , IFNULL(MEAL_CARBOHYDRATE, 0) MEAL_CARBOHYDRATE
		     , ROUND(IFNULL(IFNULL(MEAL_CARBOHYDRATE, 0) / (TOTAL_NTR * 0.01), 0), 1) MEAL_CARBOHYDRATE_RATE
		     , IFNULL(MEAL_PROTEIN, 0) MEAL_PROTEIN
		     , ROUND(IFNULL(IFNULL(MEAL_PROTEIN, 0) / (TOTAL_NTR * 0.01), 0), 1) MEAL_PROTEIN_RATE
		     , IFNULL(MEAL_FAT, 0) MEAL_FAT
		     , ROUND(IFNULL(IFNULL(MEAL_FAT, 0) / (TOTAL_NTR * 0.01), 0), 1) MEAL_FAT_RATE
		  FROM (
		        SELECT 
		               DATE_FORMAT(DATE, '%Y%m%d') DATE
		          FROM CALENDAR_DATA
		         WHERE DATE BETWEEN DATE_FORMAT(DATE_ADD(#{COACH_DE}, INTERVAL -7 DAY), '%Y%m%d')  
		        		        AND DATE_FORMAT(#{COACH_DE}, '%Y%m%d')
		     ) DT
		  LEFT JOIN (
		        SELECT
		               MBER_NO
		             , SUBSTRING(MEAL_DT, 1, 8) MEAL_DE
		             , SUM(MEAL_CALORIE) MEAL_CALORIE
		             , SUM(MEAL_CARBOHYDRATE) MEAL_CARBOHYDRATE
		             , SUM(MEAL_PROTEIN) MEAL_PROTEIN
		             , SUM(MEAL_FAT) MEAL_FAT
		             , SUM(MEAL_CARBOHYDRATE + MEAL_PROTEIN + MEAL_FAT) TOTAL_NTR
		          FROM MBER_MEAL_DIARY
		         WHERE MBER_NO = #{MBER_NO}
		           AND USE_AT = 'Y'
		         GROUP BY MBER_NO, SUBSTRING(MEAL_DT, 1, 8)
		     ) MM
		    ON DT.DATE = MM.MEAL_DE
		 ORDER BY DT.DATE DESC
	</select>
	
	<!-- 소모 칼로리 오늘로 부터 7일 데이터 조회 -->
	<select id="selectCnsmp7DayCalorieList" parameterType="hmap" resultType="hmap">
		SELECT
		       DATE
		     , IFNULL(TOTAL_CALORIE, 0) CNSMP_CALORIE
		     , IFNULL(STEPS, 0) STEP
		     , ROUND(IFNULL(IFNULL(STEPS, 0) / (TOTAL_CALORIE * 0.01), 0), 1) STEP_RATE
		     , IFNULL(TODAY_SPORTS, 0) TODAY_SPORTS
		     , ROUND(IFNULL(IFNULL(TODAY_SPORTS, 0) / (TOTAL_CALORIE * 0.01), 0), 1) TODAY_SPORTS_RATE
		     , IFNULL(THEMA_SPORTS, 0) THEMA_SPORTS
		     , ROUND(IFNULL(IFNULL(THEMA_SPORTS, 0) / (TOTAL_CALORIE * 0.01), 0), 1) THEMA_SPORTS_RATE
		  FROM (
		        SELECT 
		               DATE_FORMAT(DATE, '%Y%m%d') DATE
		          FROM CALENDAR_DATA
		         WHERE DATE BETWEEN DATE_FORMAT(DATE_ADD(#{COACH_DE}, INTERVAL -7 DAY), '%Y%m%d')  
		        		        AND DATE_FORMAT(#{COACH_DE}, '%Y%m%d')
		     ) DT
		  LEFT JOIN (
		        SELECT
		               MBER_NO
		             , EXECUT_DE
		             , MAX(IF(MESURE_CODE = 'ST', CNSMP_CALORIE, 0)) STEPS
		             , MAX(IF(MESURE_CODE = 'TS', CNSMP_CALORIE, 0)) TODAY_SPORTS
		             , MAX(IF(MESURE_CODE = 'TM', CNSMP_CALORIE, 0)) THEMA_SPORTS
		             , SUM(CNSMP_CALORIE) TOTAL_CALORIE
		          FROM (
		                SELECT 
		                       MBER_NO
		                     , SUBSTRING(MESURE_BGNDT, 1, 8) EXECUT_DE
		                     , 'ST' MESURE_CODE
		                     , ROUND(IFNULL(MAX(CNSMP_CALORIE), 0), 0) CNSMP_CALORIE
		                  FROM MESURE_INFO_ACTV_TRCK
		                 WHERE MBER_NO = #{MBER_NO}
		                 GROUP BY MBER_NO, SUBSTRING(MESURE_BGNDT, 1, 8)
		                 UNION ALL     
		                SELECT
		                       MBER_NO
		                     , SPORTS_EXECUT_DE EXECUT_DE
		                     , PROGRM_SE_CODE MESURE_CODE
		                     , ROUND(IFNULL(SUM(SPORTS_EXECUT_CALORIE), 0), 0) CNSMP_CALORIE
		                  FROM SPORTS_EXECUT_HIST
		                 WHERE MBER_NO = #{MBER_NO}
		                   AND USE_AT = 'Y'
		                 GROUP BY MBER_NO, SPORTS_EXECUT_DE, PROGRM_SE_CODE
		             ) TBL
		         GROUP BY MBER_NO, EXECUT_DE
		     ) CC
		    ON DT.DATE = CC.EXECUT_DE
		 ORDER BY DT.DATE DESC
	</select>

	<!-- 오늘의 운동 처방 이력 상세조회 -->
	<select id="selectSportsPrsscrptnHistInfo" parameterType="hmap" resultType="hmap">
		SELECT 
		       MBER_NO
		     , PRSCRPTN_DT
		     , PROGRM_SE_CODE
		     , PROGRM_PURPS_CODE
		     , PROGRM_SN
		     , REPTIT_SN
		     , TRUNCATE(DATEDIFF(DATE_FORMAT(NOW(), '%Y%m%d'), SPORTS_BGNDE) / 7, 0) + 1 PROGRM_WEEK
             , DAYOFWEEK(NOW()) - 2 PROGRM_WIK
		  FROM SPORTS_PRSCRPTN_HIST
		 WHERE MBER_NO = #{MBER_NO}
		   AND USE_AT = 'Y'
		   AND DATE_FORMAT(NOW(), '%Y%m%d') BETWEEN SPORTS_BGNDE AND SPORTS_ENDDE
	</select>
	
	<!-- 오늘의 운동 프로그램 정보 조회 -->
	<select id="selectTodaySportsProgrmInfo" parameterType="hmap" resultType="hmap">
		SELECT 
		       SP.PROGRM_SE_CODE
		     , SP.PROGRM_PURPS_CODE
		     , SP.PROGRM_SN
		     , IFNULL(SPH.REPTIT_SN, 1) REPTIT_SN
		  FROM (
		      SELECT
		             PROGRM_SE_CODE
		           , PROGRM_PURPS_CODE
		           , MAX(PROGRM_SN) PROGRM_SN
		        FROM SPORTS_PROGRM
		       WHERE USE_AT = 'Y'
		         AND PROGRM_SE_CODE = 'TS'
		       GROUP BY PROGRM_SE_CODE, PROGRM_PURPS_CODE
		     ) SP
		 LEFT JOIN (
		      SELECT
		             PROGRM_SE_CODE
		           , PROGRM_PURPS_CODE
		           , PROGRM_SN
		           , MAX(REPTIT_SN) REPTIT_SN
		        FROM SPORTS_PRSCRPTN_HIST
		       WHERE MBER_NO = #{MBER_NO}
		       GROUP BY PROGRM_SE_CODE, PROGRM_PURPS_CODE, PROGRM_SN
		     ) SPH
		    ON SP.PROGRM_SE_CODE = SPH.PROGRM_SE_CODE
		   AND SP.PROGRM_PURPS_CODE = SPH.PROGRM_PURPS_CODE
		   AND SP.PROGRM_SN = SPH.PROGRM_SN
	</select>
	
	<!-- 오늘의 운동 처방 이력 저장처리 -->
	<insert id="inserttSportsPrsscrptnHistInfo" parameterType="hmap">
		INSERT INTO SPORTS_PRSCRPTN_HIST (
			   MBER_NO
			 , PRSCRPTN_DT
			 , PROGRM_SE_CODE
			 , PROGRM_PURPS_CODE
			 , PROGRM_SN
			 , REPTIT_SN
			 , SPORTS_BGNDE
			 , SPORTS_ENDDE
			 , USE_AT
			 , REGIST_ID
			 , REGIST_DT
		) VALUES (
			   #{MBER_NO}
			 , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			 , #{PROGRM_SE_CODE}
			 , #{PROGRM_PURPS_CODE}
			 , #{PROGRM_SN}
			 , #{REPTIT_SN}
			 , DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - (DAYOFWEEK(NOW()) - 1) DAY), "%Y%m%d") 
			 , DATE_FORMAT(DATE_ADD(DATE_ADD(NOW(), INTERVAL  (7 - (DAYOFWEEK(NOW()))) DAY), INTERVAL 7 WEEK), "%Y%m%d")
			 , 'Y'
			 , 'USER_SELF'
			 , NOW()
		)
	</insert>
	
	<!-- 오늘의 운동 처방 내역 -->
	<select id="selectTodaySportsList" parameterType="hmap" resultType="hmap">
		SELECT 
		       SPD.PROGRM_SE_CODE
		     , SPD.PROGRM_PURPS_CODE
		     , SPD.PROGRM_SN
		     , SPD.PROGRM_WEEK
		     , SPD.PROGRM_WIK
		     , CONCAT('마이코치 ', SPD.PROGRM_WEEK, '주차 ', F_CODE_NM('MCSW', SPD.PROGRM_WIK, #{LOCALE}), '요일 처방 운동') PROGRM_NM
		     , CONCAT('마이코치 ', SPD.PROGRM_WEEK, '주차 ', F_CODE_NM('MCSW', SPD.PROGRM_WIK, #{LOCALE}), '요일 처방 운동') PROGRM_DC
		     , NULL PROGRM_REGN_CODE_NM
		     , NULL PROGRM_DFFLY
		     , MSPD.PRSCRPTN_SET
		     , MSPD.EXECUT_SET
		     , MSPD.TOT_SPORTS_TIME
		     , MSPD.CNSMP_CALORIE
		     , SI.ATCHMNFL_PATH
		  FROM SPORTS_PROGRM_DETAIL SPD
		  LEFT JOIN ( 
		        SELECT
		               SPORTS_TY_CODE
		             , SPORTS_REGN_CODE
		             , SPORTS_SN
		             , F_FILE_PATH(AI.ATCHMNFL_NM) ATCHMNFL_PATH
		          FROM SPORTS_INFO SI
		          LEFT JOIN ATCHMNFL_INFO AI
		            ON SI.IMAGE_ATCHMNFL_NO = AI.ATCHMNFL_NO 
		         WHERE SI.USE_AT = 'Y'
		     ) SI
		    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		   AND SPD.SPORTS_SN = SI.SPORTS_SN
		 INNER JOIN (
					SELECT 
					       SPD.PROGRM_SE_CODE
					     , SPD.PROGRM_PURPS_CODE
					     , SPD.PROGRM_SN
					     , SUM(PRSCRPTN_SET) PRSCRPTN_SET
					     , IFNULL(SUM(EXECUT_SET), 0) EXECUT_SET
					     , TIME_FORMAT(SEC_TO_TIME(SUM(SPEI.TOT_SPORTS_TIME)), '%i') TOT_SPORTS_TIME
					     , ROUND(SUM(ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * SPEI.PRSCRPTN_SET / 60, 2), 0)), 0) CNSMP_CALORIE
					  FROM SPORTS_PROGRM_DETAIL SPD
					 INNER JOIN SPORTS_INFO SI
					    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
					   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
					   AND SPD.SPORTS_SN = SI.SPORTS_SN
			  		  LEFT JOIN (
							 SELECT 
							        SPORTS_TY_CODE
							      , SPORTS_REGN_CODE
							      , SPORTS_SN
							      , SPORTS_SET EXECUT_SET
							   FROM SPORTS_EXECUT_HIST
							  WHERE MBER_NO = #{MBER_NO}
							    AND SPORTS_EXECUT_DE = DATE_FORMAT(NOW(), '%Y%m%d')
					     ) SEH
					    ON SPD.SPORTS_TY_CODE = SEH.SPORTS_TY_CODE
					   AND SPD.SPORTS_REGN_CODE = SEH.SPORTS_REGN_CODE
					   AND SPD.SPORTS_SN = SEH.SPORTS_SN
					 INNER JOIN (
					      SELECT
					             SPORTS_TY_CODE
					           , PRSCRPTN_EVL_NCL
					           , CASE WHEN SEE.WGHTVAL IS NULL THEN PRSCRPTN_CO
					                  WHEN SEE.WGHTVAL <![CDATA[ < ]]> 0     THEN PRSCRPTN_CO + FLOOR(PRSCRPTN_CO * SEE.WGHTVAL)
					                  WHEN SEE.WGHTVAL >  0    THEN PRSCRPTN_CO + CEIL(PRSCRPTN_CO * SEE.WGHTVAL)
					                  ELSE PRSCRPTN_CO
					              END PRSCRPTN_CO
					           , PRSCRPTN_SET
					           , PRSCRPTN_SPORTS_TIME
					           , PRSCRPTN_REST_TIME
					           , TOT_SPORTS_TIME
					        FROM SPORTS_PRSCRPTN_EVL_INFO SPEI
					       INNER JOIN MBER_INFO MI
					          ON MI.MBER_NO = #{MBER_NO}
					         AND SPEI.SEXDSTN = MI.SEXDSTN
					        LEFT JOIN (
									SELECT
									       MBER_NO
									     , SUM(WGHTVAL) WGHTVAL
									  FROM SPORTS_EXECUT_EVL
									 WHERE MBER_NO = #{MBER_NO}
									 GROUP BY MBER_NO
					           ) SEE
					          ON MI.MBER_NO = SEE.MBER_NO
					       WHERE EVL_SE_CODE = #{EVL_SE_CODE}
					         AND PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
					     ) SPEI
					    ON SPD.SPORTS_TY_CODE = SPEI.SPORTS_TY_CODE
					 WHERE SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
					   AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
					   AND SPD.PROGRM_SN = #{PROGRM_SN}
					   AND SPD.PROGRM_WEEK = #{PROGRM_WEEK}
					   AND SPD.PROGRM_WIK = #{PROGRM_WIK}
					   AND SPD.USE_AT = 'Y'
					   AND SI.USE_AT = 'Y'
					 GROUP BY SPD.PROGRM_SE_CODE, SPD.PROGRM_PURPS_CODE, SPD.PROGRM_SN
		     ) MSPD
		    ON SPD.PROGRM_SE_CODE = MSPD.PROGRM_SE_CODE
		   AND SPD.PROGRM_PURPS_CODE = MSPD.PROGRM_PURPS_CODE
		   AND SPD.PROGRM_SN = MSPD.PROGRM_SN
		 WHERE SPD.USE_AT = 'Y'
		   AND SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		   AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		   AND SPD.PROGRM_SN = #{PROGRM_SN}
		   AND SPD.PROGRM_WEEK = #{PROGRM_WEEK}
		   AND SPD.PROGRM_WIK = #{PROGRM_WIK}
		 ORDER BY SPD.SPORTS_TY_CODE, SPD.SPORTS_REGN_CODE, SPD.SPORTS_SN
		 LIMIT 1
	</select>
	
	<!-- 테마 운동 정보 내역 조회 -->
	<select id="selectThemaSportsInfoList" parameterType="hmap" resultType="hmap">
		SELECT 
			   IEM_CODE PROGRM_PURPS_CODE
			 , IEM_NM PROGRM_PURPS_CODE_NM
		  FROM IEM_CODE 
		 WHERE GROUP_CODE = 'MCSP' 
		   AND IEM_CODE != 'MYCC'
	</select>
	
	<!-- 테마 운동 프로그램 내역 조회 -->
	<select id="selectThemaSportsProgrmDetailList" parameterType="hmap" resultType="hmap">
		SELECT 
		       SP.PROGRM_SE_CODE
		     , SP.PROGRM_PURPS_CODE
		     , SP.PROGRM_SN
		     , 0 PROGRM_WEEK
		     , 0 PROGRM_WIK
		     , SP.PROGRM_NM
		     , SP.PROGRM_DC
		     , F_CODE_NM('MCSR', SP.PROGRM_REGN_CODE, #{LOCALE}) PROGRM_REGN_CODE_NM
		<choose>
			<when test='LOCALE != null and LOCALE.equals("KO")'>
		     , CASE WHEN SP.PROGRM_DFFLY = 'A' THEN '상'
		            WHEN SP.PROGRM_DFFLY = 'B' THEN '중'
		            WHEN SP.PROGRM_DFFLY = 'C' THEN '하'
		     		ELSE '최하'
		        END PROGRM_DFFLY
			</when>
			<otherwise>
		     , SP.PROGRM_DFFLY
			</otherwise>
		</choose>
		     , SPD.TOT_SPORTS_TIME TOT_SPORTS_TIME
		     , SPD.CNSMP_CALORIE
		     , SP.IMAGE_ATCHMNFL_NO
		     , F_FILE_PATH(AI.ATCHMNFL_NM) ATCHMNFL_PATH
		     , CASE WHEN SB.MBER_NO IS NOT NULL THEN 'Y'
		            ELSE 'N'
		        END PROGRM_BKMK
		  FROM SPORTS_PROGRM SP
		  LEFT JOIN ATCHMNFL_INFO AI
		    ON SP.IMAGE_ATCHMNFL_NO = AI.ATCHMNFL_NO
		  LEFT JOIN (
		        SELECT 
		               MBER_NO
		             , PROGRM_SE_CODE
		             , PROGRM_PURPS_CODE
		             , PROGRM_SN
		          FROM SPORTS_BKMK
		         WHERE MBER_NO = #{MBER_NO}
		     ) SB
		    ON SP.PROGRM_SE_CODE = SB.PROGRM_SE_CODE
		   AND SP.PROGRM_PURPS_CODE = SB.PROGRM_PURPS_CODE
		   AND SP.PROGRM_SN = SB.PROGRM_SN
		 INNER JOIN (
				SELECT 
				       SPD.PROGRM_SE_CODE
				     , SPD.PROGRM_PURPS_CODE
				     , SPD.PROGRM_SN
				     , TIME_FORMAT(SEC_TO_TIME(SUM(SPEI.TOT_SPORTS_TIME)), '%i') TOT_SPORTS_TIME
				     , ROUND(SUM(ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * SPEI.PRSCRPTN_SET / 60, 2), 0)), 0) CNSMP_CALORIE
				  FROM SPORTS_PROGRM_DETAIL SPD
				 INNER JOIN SPORTS_INFO SI
				    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
				   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
				   AND SPD.SPORTS_SN = SI.SPORTS_SN
				 INNER JOIN (
						  SELECT
					             SPORTS_TY_CODE
					           , PRSCRPTN_EVL_NCL
					           , CASE WHEN SEE.WGHTVAL IS NULL THEN PRSCRPTN_CO
					                  WHEN SEE.WGHTVAL <![CDATA[ < ]]> 0     THEN PRSCRPTN_CO + FLOOR(PRSCRPTN_CO * SEE.WGHTVAL)
					                  WHEN SEE.WGHTVAL > 0     THEN PRSCRPTN_CO + CEIL(PRSCRPTN_CO * SEE.WGHTVAL)
					                  ELSE PRSCRPTN_CO
					              END PRSCRPTN_CO
					           , PRSCRPTN_SET
					           , PRSCRPTN_SPORTS_TIME
					           , PRSCRPTN_REST_TIME
					           , TOT_SPORTS_TIME
					        FROM SPORTS_PRSCRPTN_EVL_INFO SPEI
					       INNER JOIN MBER_INFO MI
					          ON MI.MBER_NO = #{MBER_NO}
					         AND SPEI.SEXDSTN = MI.SEXDSTN
					        LEFT JOIN (
									SELECT
									       MBER_NO
									     , SUM(WGHTVAL) WGHTVAL
									  FROM SPORTS_EXECUT_EVL
									 WHERE MBER_NO = #{MBER_NO}
									 GROUP BY MBER_NO
					           ) SEE
					          ON MI.MBER_NO = SEE.MBER_NO
					       WHERE EVL_SE_CODE = #{EVL_SE_CODE}
					         AND PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
				     ) SPEI
				    ON SPD.SPORTS_TY_CODE = SPEI.SPORTS_TY_CODE
				 WHERE SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
				   AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
				   AND SPD.USE_AT = 'Y'
				 GROUP BY SPD.PROGRM_SE_CODE, SPD.PROGRM_PURPS_CODE, SPD.PROGRM_SN
		     ) SPD
		    ON SP.PROGRM_SE_CODE = SPD.PROGRM_SE_CODE
		   AND SP.PROGRM_PURPS_CODE = SPD.PROGRM_PURPS_CODE
		   AND SP.PROGRM_SN = SPD.PROGRM_SN
		 WHERE SP.USE_AT = 'Y'
		   AND SP.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		   AND SP.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
	</select>
	
	<!-- 내가 좋아하는 운동 내역 -->
	<select id="selectBkmkSportsList" parameterType="hmap" resultType="hmap">
		SELECT
		       SB.PROGRM_SE_CODE
		     , SB.PROGRM_PURPS_CODE
		     , SB.PROGRM_SN
		     , 0 PROGRM_WEEK
		     , 0 PROGRM_WIK
		     , SP.PROGRM_NM
		     , SP.PROGRM_DC
		     , F_CODE_NM('MCSR', SP.PROGRM_REGN_CODE, #{LOCALE}) PROGRM_REGN_CODE_NM
		<choose>
			<when test='LOCALE != null and LOCALE.equals("KO")'>
		     , CASE WHEN SP.PROGRM_DFFLY = 'A' THEN '상'
		            WHEN SP.PROGRM_DFFLY = 'B' THEN '중'
		            WHEN SP.PROGRM_DFFLY = 'C' THEN '하'
		     		ELSE '최하'
		        END PROGRM_DFFLY
			</when>
			<otherwise>
		     , SP.PROGRM_DFFLY
			</otherwise>
		</choose>
		     , SPD.TOT_SPORTS_TIME
		     , SPD.CNSMP_CALORIE
		     , SP.IMAGE_ATCHMNFL_NO
		     , F_FILE_PATH(AI.ATCHMNFL_NM) ATCHMNFL_PATH
		  FROM SPORTS_BKMK SB
		 INNER JOIN SPORTS_PROGRM SP
		    ON SB.PROGRM_SE_CODE = SP.PROGRM_SE_CODE
		   AND SB.PROGRM_PURPS_CODE = SP.PROGRM_PURPS_CODE
		   AND SB.PROGRM_SN = SP.PROGRM_SN
 		 INNER JOIN (
				SELECT 
				       SPD.PROGRM_SE_CODE
				     , SPD.PROGRM_PURPS_CODE
				     , SPD.PROGRM_SN
				     , TIME_FORMAT(SEC_TO_TIME(SUM(SPEI.TOT_SPORTS_TIME)), '%i') TOT_SPORTS_TIME
				     , ROUND(SUM(ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * SPEI.PRSCRPTN_SET / 60, 2), 0)), 0) CNSMP_CALORIE
				  FROM SPORTS_PROGRM_DETAIL SPD
				 INNER JOIN SPORTS_INFO SI
				    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
				   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
				   AND SPD.SPORTS_SN = SI.SPORTS_SN
				 INNER JOIN (
					  SELECT
				             SPORTS_TY_CODE
				           , PRSCRPTN_EVL_NCL
				           , CASE WHEN SEE.WGHTVAL IS NULL THEN PRSCRPTN_CO
				                  WHEN SEE.WGHTVAL <![CDATA[ < ]]> 0     THEN PRSCRPTN_CO + FLOOR(PRSCRPTN_CO * SEE.WGHTVAL)
				                  WHEN SEE.WGHTVAL > 0     THEN PRSCRPTN_CO + CEIL(PRSCRPTN_CO * SEE.WGHTVAL)
				                  ELSE PRSCRPTN_CO
				              END PRSCRPTN_CO
				           , PRSCRPTN_SET
				           , PRSCRPTN_SPORTS_TIME
				           , PRSCRPTN_REST_TIME
				           , TOT_SPORTS_TIME
				        FROM SPORTS_PRSCRPTN_EVL_INFO SPEI
				       INNER JOIN MBER_INFO MI
				          ON MI.MBER_NO = #{MBER_NO}
				         AND SPEI.SEXDSTN = MI.SEXDSTN
				        LEFT JOIN (
								SELECT
								       MBER_NO
								     , SUM(WGHTVAL) WGHTVAL
								  FROM SPORTS_EXECUT_EVL
								 WHERE MBER_NO = #{MBER_NO}
								 GROUP BY MBER_NO
				           ) SEE
				          ON MI.MBER_NO = SEE.MBER_NO
				       WHERE EVL_SE_CODE = #{EVL_SE_CODE}
				         AND PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
				     ) SPEI
				    ON SPD.SPORTS_TY_CODE = SPEI.SPORTS_TY_CODE
				 WHERE SPD.USE_AT = 'Y'
				 GROUP BY SPD.PROGRM_SE_CODE, SPD.PROGRM_PURPS_CODE, SPD.PROGRM_SN
		     ) SPD
		    ON SP.PROGRM_SE_CODE = SPD.PROGRM_SE_CODE
		   AND SP.PROGRM_PURPS_CODE = SPD.PROGRM_PURPS_CODE
		   AND SP.PROGRM_SN = SPD.PROGRM_SN
		  LEFT JOIN ATCHMNFL_INFO AI
			ON SP.IMAGE_ATCHMNFL_NO = AI.ATCHMNFL_NO 
		 WHERE SB.MBER_NO = #{MBER_NO}
	</select>
	
	<!-- 내가 좋아하는 운동 상세조회 -->
	<select id="selectSportsBkmkInfo" parameterType="hmap" resultType="hmap">
		SELECT 
		       MBER_NO
		     , PROGRM_SE_CODE
		     , PROGRM_PURPS_CODE
		     , PROGRM_SN
		     , REGIST_DT 
		  FROM SPORTS_BKMK
		 WHERE MBER_NO = #{MBER_NO}
		   AND PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		   AND PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		   AND PROGRM_SN = #{PROGRM_SN} 
	</select>
	
	<!-- 내가 좋아하는 운동 저장처리 -->
	<insert id="insertSportsBkmkInfo" parameterType="hmap">
		INSERT INTO SPORTS_BKMK (
			   MBER_NO
			 , PROGRM_SE_CODE
			 , PROGRM_PURPS_CODE
			 , PROGRM_SN
			 , REGIST_DT
		) VALUES (
			   #{MBER_NO}
			 , #{PROGRM_SE_CODE}
			 , #{PROGRM_PURPS_CODE}
			 , #{PROGRM_SN}
			 , NOW()
		)
	</insert>
	
	<!-- 내가 좋아하는 운동 삭제처리 -->
	<delete id="deleteSportsBkmkInfo" parameterType="hmap">
		DELETE FROM SPORTS_BKMK
		 WHERE MBER_NO = #{MBER_NO}
		   AND PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		   AND PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		   AND PROGRM_SN = #{PROGRM_SN}
	</delete>
	
	<!-- 운동처방 평가 정보 기준 데이터 조회 -->
	<select id="selectSportsPrscrptnEvlStdInfo" parameterType="hmap" resultType="hmap">
		SELECT 
		       CAL_TY_CODE EVL_SE_CODE
		     , CASE WHEN CAL_TY_CODE = 'BM' AND CAL_VAL = '좋음' THEN 'ST'
		            WHEN CAL_TY_CODE = 'BM' AND CAL_VAL = '적음' THEN 'LW'
		            WHEN CAL_TY_CODE = 'BM' AND CAL_VAL = '주의' THEN 'OW'
		            WHEN CAL_TY_CODE = 'BM' AND CAL_VAL LIKE '%나쁨%' THEN 'OB'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '마른형' THEN 'TH'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '마른근육형' THEN 'TM'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '근육형' THEN 'MU'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '운동부족형' THEN 'LE'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '표준형' THEN 'ST'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '표준근육형' THEN 'SM'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '마른비만형' THEN 'LO'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '비만형' THEN 'OB'
		            WHEN CAL_TY_CODE = 'IS' AND CAL_VAL = '우람한형' THEN 'BK'
		            ELSE 'ST'
		       END PRSCRPTN_EVL_NCL
		     , SEXDSTN
		  FROM (
		        SELECT 
		               MI.MBER_NO
		             , CASE WHEN PBF IS NOT NULL AND SLM IS NOT NULL THEN 'IS'
		                    WHEN BMI IS NOT NULL THEN 'BM'
		                    ELSE 'BM'
		                END CAL_TY_CODE
		             , CASE WHEN PBF IS NOT NULL AND SLM IS NOT NULL THEN F_BYP_JDGMNT(MI.AGE, MI.SEXDSTN, PBF, SLM, 'T', 'KO')
		                    WHEN BMI IS NOT NULL THEN F_MESURE_GRAD_NM(MI.MBER_NO, '6056', BMI, 'KO')
		                    ELSE 'ST'
		                END CAL_VAL
		             , SEXDSTN
		          FROM (
		                SELECT
		                       MBER_NO
		                     , CAST((DATE_FORMAT(NOW(), '%Y') - SUBSTR(BRTHDY, 1, 4)) + IF(DATE_FORMAT(NOW(), '%m%d') <![CDATA[ < ]]> SUBSTR(BRTHDY, 5, 8), -1, 0) AS CHAR) AS AGE
		                     , SEXDSTN
		                  FROM MBER_INFO
		                 WHERE MBER_NO = #{MBER_NO}
		             ) MI
		          LEFT JOIN (
		                SELECT
		                       MBER_NO
		                     , MAX(IF(MESURE_CODE = '6022', MESURE_DATA, NULL)) PBF
		                     , MAX(IF(MESURE_CODE = '6023', MESURE_DATA, NULL)) SLM
		                     , MAX(IF(MESURE_CODE = '6056', MESURE_DATA, NULL)) BMI
		                     , MESURE_DT
		                  FROM MESURE_INFO_CMMN
		                 WHERE MBER_NO = #{MBER_NO}
		                   AND MESURE_CODE IN ('6022', '6023', '6056')
		                 GROUP BY MBER_NO, MESURE_DT
		                 ORDER BY MESURE_DT DESC
		                 LIMIT 1
		             ) MIC
		            ON MI.MBER_NO = MIC.MBER_NO
		     ) TBL
	</select>
	
	<!-- 운동 프로그램 운동 내역 조회 -->
	<select id="selectSportsProgrmDetailSumryInfo" parameterType="hmap" resultType="hmap">
		SELECT
		       SPD.PROGRM_SE_CODE
		     , SPD.PROGRM_PURPS_CODE
		     , SPD.PROGRM_SN
		     , SPD.PROGRM_WEEK
		     , SPD.PROGRM_WIK
		     , SUM(IF(SPD.RN = 1, SPEI.PRSCRPTN_SET, 0)) SPORTS_1_PRSCRPTN_SET
		     , IFNULL(SUM(IF(SPD.RN = 1, SEH.SPORTS_SET, 0)), 0) SPORTS_1_EXECUT_SET
		     , SUM(IF(SPD.RN = 2, SPEI.PRSCRPTN_SET, 0)) SPORTS_2_PRSCRPTN_SET
		     , IFNULL(SUM(IF(SPD.RN = 2, SEH.SPORTS_SET, 0)), 0) SPORTS_2_EXECUT_SET
		     , SUM(IF(SPD.RN = 3, SPEI.PRSCRPTN_SET, 0)) SPORTS_3_PRSCRPTN_SET
		     , IFNULL(SUM(IF(SPD.RN = 3, SEH.SPORTS_SET, 0)), 0) SPORTS_3_EXECUT_SET
		     , ROUND(SUM(ROUND(((((SPD.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * SPEI.PRSCRPTN_SET / 60, 2), 0)), 0) PRSCRPTN_CALORIE
		     , IFNULL(SUM(SEH.SPORTS_EXECUT_CALORIE), 0) EXECUT_CALORIE
		     , ROUND(IFNULL(SUM(SEH.SPORTS_EXECUT_CALORIE), 0) / (ROUND(SUM(ROUND(((((SPD.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * SPEI.PRSCRPTN_SET / 60, 2), 0)), 0) * 0.01), 1) CALORIE_RATE
     		 , TIME_FORMAT(SEC_TO_TIME(SUM(SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * COUNT(SPEI.PRSCRPTN_SET)), '%i')  PRSCRPTN_TIME
		 	 , TIME_FORMAT(SEC_TO_TIME(IFNULL(SUM(SEH.SPORTS_EXECUT_TIME), 0)), '%i')  EXECUT_TIME 
     		 , ROUND(IFNULL(SUM(SEH.SPORTS_EXECUT_TIME), 0) / (SUM(SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * COUNT(SPEI.PRSCRPTN_SET) * 0.01), 1) TIME_RATE
		  FROM (
		      SELECT 
		             SPD.PROGRM_SE_CODE
		           , SPD.PROGRM_PURPS_CODE
		           , SPD.PROGRM_SN
		           , SPD.PROGRM_WEEK
		           , SPD.PROGRM_WIK
		           , SPD.SPORTS_TY_CODE
		           , SPD.SPORTS_REGN_CODE
		           , SPD.SPORTS_SN
		           , @RN := @RN + 1 RN
		           , SI.SPORTS_IN
		        FROM SPORTS_PROGRM_DETAIL SPD
		       INNER JOIN SPORTS_INFO SI
		  		    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		  		   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		  		   AND SPD.SPORTS_SN = SI.SPORTS_SN
		       INNER JOIN (SELECT @RN := 0) R
		       WHERE SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		         AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		         AND SPD.PROGRM_SN = #{PROGRM_SN}
		         AND SPD.PROGRM_WEEK = #{PROGRM_WEEK}
		         AND SPD.PROGRM_WIK = #{PROGRM_WIK}
		         AND SPD.USE_AT = 'Y'
		       ORDER BY SPD.SPORTS_TY_CODE, SPD.SPORTS_REGN_CODE, SPD.SPORTS_SN
		     ) SPD
		 INNER JOIN (
		      SELECT
		             SPORTS_TY_CODE
		           , PRSCRPTN_EVL_NCL
		           <![CDATA[
		           , CASE WHEN SEE.WGHTVAL IS NULL THEN PRSCRPTN_CO
		                  WHEN SEE.WGHTVAL <  0  THEN PRSCRPTN_CO + FLOOR(PRSCRPTN_CO * SEE.WGHTVAL)
		                  WHEN SEE.WGHTVAL >  0  THEN PRSCRPTN_CO + CEIL(PRSCRPTN_CO * SEE.WGHTVAL)
		                  ELSE PRSCRPTN_CO
		              END PRSCRPTN_CO
		           ]]>
		           , PRSCRPTN_SET
		           , PRSCRPTN_SPORTS_TIME
		           , PRSCRPTN_REST_TIME
		           , TOT_SPORTS_TIME
		           , PRSCRPTN_CALORIE
		        FROM SPORTS_PRSCRPTN_EVL_INFO SPEI
		       INNER JOIN MBER_INFO MI
		          ON MI.MBER_NO = #{MBER_NO}
		         AND SPEI.SEXDSTN = MI.SEXDSTN
		        LEFT JOIN (
		    				SELECT
		    				       MBER_NO
		    				     , SUM(WGHTVAL) WGHTVAL
		    				  FROM SPORTS_EXECUT_EVL
		    				 WHERE MBER_NO = #{MBER_NO}
		    				 GROUP BY MBER_NO
		           ) SEE
		          ON MI.MBER_NO = SEE.MBER_NO
		       WHERE EVL_SE_CODE = #{EVL_SE_CODE}
		         AND PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
		     ) SPEI
		    ON SPD.SPORTS_TY_CODE = SPEI.SPORTS_TY_CODE
		  LEFT JOIN (
		        SELECT 
		               MBER_NO
		             , SPORTS_TY_CODE
		             , SPORTS_REGN_CODE
		             , SPORTS_SN
		             , SPORTS_SET
		             , SPORTS_EXECUT_CALORIE
		             , SPORTS_EXECUT_TIME
		          FROM SPORTS_EXECUT_HIST
		         WHERE MBER_NO = #{MBER_NO}
		           AND SPORTS_EXECUT_DE = DATE_FORMAT(NOW(), '%Y%m%d')
		      ) SEH
		    ON SPD.SPORTS_TY_CODE = SEH.SPORTS_TY_CODE
		   AND SPD.SPORTS_REGN_CODE = SEH.SPORTS_REGN_CODE
		   AND SPD.SPORTS_SN = SEH.SPORTS_SN
		 GROUP BY SPD.PROGRM_SE_CODE, SPD.PROGRM_PURPS_CODE, SPD.PROGRM_SN, SPD.PROGRM_WEEK, SPD.PROGRM_WIK
	</select>
	
	<!-- 운동 프로그램 운동 내역 조회 -->
	<select id="selectSportsProgrmDetailSportsInfoExecutHistList" parameterType="hmap" resultType="hmap">
		SELECT
		       SPD.SPORTS_TY_CODE
		     , SPD.SPORTS_REGN_CODE
		     , SPD.SPORTS_SN
		<choose>
			<when test='LOCALE != null and LOCALE.equals("KO")'>
		     , CASE WHEN SI.SPORTS_DFFLY = '1' THEN '상'
		            WHEN SI.SPORTS_DFFLY = '2' THEN '중'
		            WHEN SI.SPORTS_DFFLY = '3' THEN '하'
		     		ELSE '최하'
		        END SPORTS_DFFLY
			</when>
			<otherwise>
		     , SI.SPORTS_DFFLY
			</otherwise>
		</choose>
		     , SI.SPORTS_IN
		     , SI.SPORTS_NM
		     , SI.SPORTS_DC
		     , F_FILE_PATH(AI.ATCHMNFL_NM) ATCHMNFL_PATH
		     , SI.SPORTS_MVP_ADRES
		     , SPEI.PRSCRPTN_EVL_NCL
		     , SPEI.PRSCRPTN_CO
		     , SPEI.PRSCRPTN_SET
		     , SPEI.PRSCRPTN_SPORTS_TIME
		     , SPEI.PRSCRPTN_REST_TIME
		     , SPEI.TOT_SPORTS_TIME
		     , ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) * SPEI.PRSCRPTN_SET / 60, 2), 0) PRSCRPTN_CALORIE
		     , IFNULL(SEH.SPORTS_SET, 0) EXECUT_SET
		     , IFNULL(SEH.SPORTS_TIME, 0) EXECUT_TIME
		     , ROUND(IFNULL(SEH.SPORTS_CALORIE, 0), 0) EXECUT_CALORIE
		  FROM SPORTS_PROGRM_DETAIL SPD
		 INNER JOIN SPORTS_INFO SI
		    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		   AND SPD.SPORTS_SN = SI.SPORTS_SN
		 LEFT JOIN ATCHMNFL_INFO AI
			ON SI.IMAGE_ATCHMNFL_NO = AI.ATCHMNFL_NO 
	     INNER JOIN (
			  SELECT
		             SPORTS_TY_CODE
		           , PRSCRPTN_EVL_NCL
		           , CASE WHEN SEE.WGHTVAL IS NULL THEN PRSCRPTN_CO
		                  WHEN SEE.WGHTVAL <![CDATA[ < ]]> 0     THEN PRSCRPTN_CO + FLOOR(PRSCRPTN_CO * SEE.WGHTVAL)
		                  WHEN SEE.WGHTVAL > 0     THEN PRSCRPTN_CO + CEIL(PRSCRPTN_CO * SEE.WGHTVAL)
		                  ELSE PRSCRPTN_CO
		              END PRSCRPTN_CO
		           , PRSCRPTN_SET
		           , PRSCRPTN_SPORTS_TIME
		           , PRSCRPTN_REST_TIME
		           , TOT_SPORTS_TIME
		        FROM SPORTS_PRSCRPTN_EVL_INFO SPEI
		       INNER JOIN MBER_INFO MI
		          ON MI.MBER_NO = #{MBER_NO}
		         AND SPEI.SEXDSTN = MI.SEXDSTN
		        LEFT JOIN (
						SELECT
						       MBER_NO
						     , SUM(WGHTVAL) WGHTVAL
						  FROM SPORTS_EXECUT_EVL
						 WHERE MBER_NO = #{MBER_NO}
						 GROUP BY MBER_NO
		           ) SEE
		          ON MI.MBER_NO = SEE.MBER_NO
		       WHERE EVL_SE_CODE = #{EVL_SE_CODE}
		         AND PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
	         ) SPEI
	        ON SPD.SPORTS_TY_CODE = SPEI.SPORTS_TY_CODE
		  LEFT JOIN (
		        SELECT
		               SEH.MBER_NO
		             , SEH.SPORTS_EXECUT_DE
		             , SEH.SPORTS_TY_CODE
		             , SEH.SPORTS_REGN_CODE
		             , SEH.SPORTS_SN
		             , MAX(SEH.SPORTS_SET) SPORTS_SET
		             , MAX(SEH.SPORTS_EXECUT_TIME) SPORTS_TIME
		             , MAX(SPORTS_EXECUT_CALORIE) SPORTS_CALORIE
		          FROM SPORTS_EXECUT_HIST SEH
		         WHERE SEH.MBER_NO = #{MBER_NO}
		           AND SEH.USE_AT = 'Y'
		           AND SEH.SPORTS_EXECUT_DE = DATE_FORMAT(NOW(), '%Y%m%d')
		         GROUP BY SEH.MBER_NO, SEH.SPORTS_EXECUT_DE, SEH.SPORTS_TY_CODE, SEH.SPORTS_REGN_CODE, SEH.SPORTS_SN
		     ) SEH
		    ON SPD.SPORTS_TY_CODE = SEH.SPORTS_TY_CODE
		   AND SPD.SPORTS_REGN_CODE = SEH.SPORTS_REGN_CODE
		   AND SPD.SPORTS_SN = SEH.SPORTS_SN
		 WHERE SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		   AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		   AND SPD.PROGRM_SN = #{PROGRM_SN}
		   AND SPD.PROGRM_WEEK = #{PROGRM_WEEK}
		   AND SPD.PROGRM_WIK = #{PROGRM_WIK}
		   AND SPD.USE_AT = 'Y'
		 ORDER BY SPD.SPORTS_TY_CODE, SPD.SPORTS_REGN_CODE, SPD.SPORTS_SN
	</select>
	
	<!-- 운동 프로그램 운동 내역 상세조회 -->
	<select id="selectSportsProgrmDetailSportsInfoExecutHistInfo" parameterType="hmap" resultType="hmap">
		SELECT
		       SPD.SPORTS_TY_CODE
		     , SPD.SPORTS_REGN_CODE
		     , SPD.SPORTS_SN
		<choose>
			<when test='LOCALE != null and LOCALE.equals("KO")'>
		     , CASE WHEN SI.SPORTS_DFFLY = 'A' THEN '상'
		            WHEN SI.SPORTS_DFFLY = 'B' THEN '중'
		            WHEN SI.SPORTS_DFFLY = 'C' THEN '하'
		     		ELSE '최하'
		        END SPORTS_DFFLY
			</when>
			<otherwise>
		     , SI.SPORTS_DFFLY
			</otherwise>
		</choose>
		     , SI.SPORTS_IN
		     , SI.SPORTS_NM
		     , SI.SPORTS_DC
		     , SI.IMAGE_ATCHMNFL_NO
		     , SI.SPORTS_MVP_ADRES
		     , SPEI.PRSCRPTN_EVL_NCL
		     , SPEI.PRSCRPTN_CO
		     , SPEI.PRSCRPTN_SET
		     , SPEI.PRSCRPTN_SPORTS_TIME
		     , SPEI.PRSCRPTN_REST_TIME
		     , SPEI.TOT_SPORTS_TIME
		     , ROUND(((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) / 60, 2), 0) PRSCRPTN_CALORIE
		     , IFNULL(SEH.SPORTS_EXECUT_DE, DATE_FORMAT(NOW(), '%Y%m%d')) EXECUT_DE
		     , IFNULL(SEH.SPORTS_SET, 0) EXECUT_SET
		     , IFNULL(SEH.SPORTS_TIME, 0) EXECUT_TIME
		     , IFNULL(SEH.SPORTS_CALORIE, 0) EXECUT_CALORIE
         	 , ROUND((((((SI.SPORTS_IN * 3.5) - 3.5) * #{BDWGH}) / 1000) * 5 * ROUND((SPEI.PRSCRPTN_SPORTS_TIME + SPEI.PRSCRPTN_REST_TIME) / 60, 2)), 2) CNSMP_CALORIE
		  FROM SPORTS_PROGRM_DETAIL SPD
		 INNER JOIN SPORTS_INFO SI
		    ON SPD.SPORTS_TY_CODE = SI.SPORTS_TY_CODE
		   AND SPD.SPORTS_REGN_CODE = SI.SPORTS_REGN_CODE
		   AND SPD.SPORTS_SN = SI.SPORTS_SN
	     INNER JOIN (
			  SELECT
		             SPORTS_TY_CODE
		           , PRSCRPTN_EVL_NCL
		           , CASE WHEN SEE.WGHTVAL IS NULL THEN PRSCRPTN_CO
		                  WHEN SEE.WGHTVAL <![CDATA[ < ]]> 0     THEN PRSCRPTN_CO + FLOOR(PRSCRPTN_CO * SEE.WGHTVAL)
		                  WHEN SEE.WGHTVAL > 0     THEN PRSCRPTN_CO + CEIL(PRSCRPTN_CO * SEE.WGHTVAL)
		                  ELSE PRSCRPTN_CO
		              END PRSCRPTN_CO
		           , PRSCRPTN_SET
		           , PRSCRPTN_SPORTS_TIME
		           , PRSCRPTN_REST_TIME
		           , TOT_SPORTS_TIME
		        FROM SPORTS_PRSCRPTN_EVL_INFO SPEI
		       INNER JOIN MBER_INFO MI
		          ON MI.MBER_NO = #{MBER_NO}
		         AND SPEI.SEXDSTN = MI.SEXDSTN
		        LEFT JOIN (
						SELECT
						       MBER_NO
						     , SUM(WGHTVAL) WGHTVAL
						  FROM SPORTS_EXECUT_EVL
						 WHERE MBER_NO = #{MBER_NO}
						 GROUP BY MBER_NO
		           ) SEE
		          ON MI.MBER_NO = SEE.MBER_NO
		       WHERE EVL_SE_CODE = #{EVL_SE_CODE}
		         AND PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
	         ) SPEI
	        ON SPD.SPORTS_TY_CODE = SPEI.SPORTS_TY_CODE
		  LEFT JOIN (
		        SELECT
		               SEH.MBER_NO
		             , SEH.SPORTS_EXECUT_DE
		             , SEH.SPORTS_TY_CODE
		             , SEH.SPORTS_REGN_CODE
		             , SEH.SPORTS_SN
		             , MAX(SEH.SPORTS_SET) SPORTS_SET
		             , MAX(SEH.SPORTS_EXECUT_TIME) SPORTS_TIME
		             , MAX(SPORTS_EXECUT_CALORIE) SPORTS_CALORIE
		          FROM SPORTS_EXECUT_HIST SEH
		         WHERE SEH.MBER_NO = #{MBER_NO}
		           AND SEH.USE_AT = 'Y'
		           AND SEH.SPORTS_EXECUT_DE = DATE_FORMAT(NOW(), '%Y%m%d')
		         GROUP BY SEH.MBER_NO, SEH.SPORTS_EXECUT_DE, SEH.SPORTS_TY_CODE, SEH.SPORTS_REGN_CODE, SEH.SPORTS_SN
		     ) SEH
		    ON SPD.SPORTS_TY_CODE = SEH.SPORTS_TY_CODE
		   AND SPD.SPORTS_REGN_CODE = SEH.SPORTS_REGN_CODE
		   AND SPD.SPORTS_SN = SEH.SPORTS_SN
		 WHERE SPD.PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		<if test = "PROGRM_PURPS_CODE != null and PROGRM_PURPS_CODE != ''">
		   AND SPD.PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		</if>
		<if test = "PROGRM_SN != null and PROGRM_SN != ''">		 
		   AND SPD.PROGRM_SN = #{PROGRM_SN}
		</if>
		<if test = "PROGRM_WEEK != null and PROGRM_WEEK != ''">
		   AND SPD.PROGRM_WEEK = #{PROGRM_WEEK}
		</if>
		<if test = "PROGRM_WIK != null and PROGRM_WIK != ''">
		   AND SPD.PROGRM_WIK = #{PROGRM_WIK}
		</if>
		   AND SPD.SPORTS_TY_CODE = #{SPORTS_TY_CODE}
           AND SPD.SPORTS_REGN_CODE = #{SPORTS_REGN_CODE}
           AND SPD.SPORTS_SN = #{SPORTS_SN}
		   AND SPD.USE_AT = 'Y'
		 ORDER BY SPD.SPORTS_TY_CODE, SPD.SPORTS_REGN_CODE, SPD.SPORTS_SN
	</select>
	
	<!-- 운동 프로그램 실행 이력 저장처리 -->
	<insert id="insertSportsExecutHistInfo" parameterType="hmap">
		INSERT INTO SPORTS_EXECUT_HIST (
			   MBER_NO
			 , SPORTS_EXECUT_DE
			 , SPORTS_TY_CODE
			 , SPORTS_REGN_CODE
			 , SPORTS_SN
			 , SPORTS_SET
			 , PRSCRPTN_DT
			 , PROGRM_SE_CODE
			 , PROGRM_PURPS_CODE
			 , PROGRM_SN
			 , REPTIT_SN
			 , PROGRM_WEEK
			 , PROGRM_WIK
			 , GOAL_CNSMP_CALORIE
			 , PRSCRPTN_EVL_NCL
			 , PRSCRPTN_CO
			 , PRSCRPTN_SET
			 , PRSCRPTN_SPORTS_TIME
			 , PRSCRPTN_REST_TIME
			 , TOT_SPORTS_TIME
			 , PRSCRPTN_CALORIE
			 , SPORTS_EXECUT_TIME
			 , SPORTS_EXECUT_CALORIE
			 , EVL_SE_CODE
			 , USE_AT
			 , REGIST_DT
		) VALUES (
			   #{MBER_NO}
			 , DATE_FORMAT(NOW(), '%Y%m%d')
			 , #{SPORTS_TY_CODE}
			 , #{SPORTS_REGN_CODE}
			 , #{SPORTS_SN}
			 , #{SPORTS_SET}
			 , #{PRSCRPTN_DT}
			 , #{PROGRM_SE_CODE}
			 , #{PROGRM_PURPS_CODE}
			 , #{PROGRM_SN}
			 , #{REPTIT_SN}
			 , #{PROGRM_WEEK}
			 , #{PROGRM_WIK}
			 , #{GOAL_CNSMP_CALORIE}
			 , #{PRSCRPTN_EVL_NCL}
			 , #{PRSCRPTN_CO}
			 , #{PRSCRPTN_SET}
			 , #{PRSCRPTN_SPORTS_TIME}
			 , #{PRSCRPTN_REST_TIME}
			 , #{TOT_SPORTS_TIME}
			 , #{PRSCRPTN_CALORIE}
			 , #{SPORTS_EXECUT_TIME}
			 , #{SPORTS_EXECUT_CALORIE}
			 , #{EVL_SE_CODE}
			 , 'Y'
			 , NOW()
		)
	</insert>
	
	<!-- 운동 프로그램 실행 이력 수정처리 -->
	<update id="updateSportsExecutHistInfo" parameterType="hmap">
		UPDATE SPORTS_EXECUT_HIST SET
			   SPORTS_SET = #{SPORTS_SET}
		<if test="PRSCRPTN_DT != null and PRSCRPTN_DT != ''">
			 , PRSCRPTN_DT = #{PRSCRPTN_DT}
		</if>
		<if test="PROGRM_SE_CODE != null and PROGRM_SE_CODE != ''">
			 , PROGRM_SE_CODE = #{PROGRM_SE_CODE}
		</if>
		<if test="PROGRM_PURPS_CODE != null and PROGRM_PURPS_CODE != ''">
			 , PROGRM_PURPS_CODE = #{PROGRM_PURPS_CODE}
		</if>
		<if test="PROGRM_SN != null and PROGRM_SN != ''">
			 , PROGRM_SN = #{PROGRM_SN}
		</if>
		<if test="REPTIT_SN != null and REPTIT_SN != ''">
			 , REPTIT_SN = #{REPTIT_SN}
		</if>
		<if test="PROGRM_WEEK != null and PROGRM_WEEK != ''">
			 , PROGRM_WEEK = #{PROGRM_WEEK}
		</if>
		<if test="PROGRM_WIK != null and PROGRM_WIK != ''">
			 , PROGRM_WIK = #{PROGRM_WIK}
		</if>
		<if test="GOAL_CNSMP_CALORIE != null and GOAL_CNSMP_CALORIE != ''">
			 , GOAL_CNSMP_CALORIE = #{GOAL_CNSMP_CALORIE}
		</if>
		<if test="PRSCRPTN_EVL_NCL != null and PRSCRPTN_EVL_NCL != ''">
			 , PRSCRPTN_EVL_NCL = #{PRSCRPTN_EVL_NCL}
		</if>
		<if test="PRSCRPTN_CO != null and PRSCRPTN_CO != ''">
			 , PRSCRPTN_CO = #{PRSCRPTN_CO}
		</if>
		<if test="PRSCRPTN_SET != null and PRSCRPTN_SET != ''">
			 , PRSCRPTN_SET = #{PRSCRPTN_SET}
		</if>
		<if test="PRSCRPTN_SPORTS_TIME != null and PRSCRPTN_SPORTS_TIME != ''">
			 , PRSCRPTN_SPORTS_TIME = #{PRSCRPTN_SPORTS_TIME}
		</if>
		<if test="PRSCRPTN_REST_TIME != null and PRSCRPTN_REST_TIME != ''">
			 , PRSCRPTN_REST_TIME = #{PRSCRPTN_REST_TIME}
		</if>
		<if test="TOT_SPORTS_TIME != null and TOT_SPORTS_TIME != ''">
			 , TOT_SPORTS_TIME = #{TOT_SPORTS_TIME}
		</if>
		<if test="PRSCRPTN_CALORIE != null and PRSCRPTN_CALORIE != ''">
			 , PRSCRPTN_CALORIE = #{PRSCRPTN_CALORIE}
		</if>
		<if test="SPORTS_EXECUT_TIME != null and SPORTS_EXECUT_TIME != ''">
			 , SPORTS_EXECUT_TIME = #{SPORTS_EXECUT_TIME}
		</if>
		<if test="SPORTS_EXECUT_CALORIE != null and SPORTS_EXECUT_CALORIE != ''">
			 , SPORTS_EXECUT_CALORIE = #{SPORTS_EXECUT_CALORIE}
		</if>
		<if test="EVL_SE_CODE != null and EVL_SE_CODE != ''">
			 , EVL_SE_CODE = #{EVL_SE_CODE}
		</if>
		 WHERE MBER_NO = #{MBER_NO}
		   AND SPORTS_EXECUT_DE = #{SPORTS_EXECUT_DE}
		   AND SPORTS_TY_CODE = #{SPORTS_TY_CODE}
		   AND SPORTS_REGN_CODE = #{SPORTS_REGN_CODE}
		   AND SPORTS_SN = #{SPORTS_SN}
	</update>
	
	<!-- 운동 가중치 정보 조회 -->
	<select id="selectWghtvalInfo" parameterType="hmap" resultType="hmap">
		SELECT 
		       CASE WHEN EVL_SE_CODE_1 = 'HGET' AND EVL_SE_CODE_2 = 'HGET' AND #{EVL_SE_CODE} = 'HGET' THEN -0.05
		            WHEN EVL_SE_CODE_1 = 'LWET' AND EVL_SE_CODE_2 = 'LWET' AND #{EVL_SE_CODE} = 'LWET' THEN 0.05
		            ELSE NULL
		        END WGHTVAL
		  FROM (
		        SELECT
		               MBER_NO
		             , MAX(IF(RN = 1, EVL_SE_CODE, '')) EVL_SE_CODE_1
		             , MAX(IF(RN = 2, EVL_SE_CODE, '')) EVL_SE_CODE_2
		          FROM (
						SELECT 
		                       SEE.MBER_NO
		                     , @RN := @RN + 1 RN
		                     , SEE.SPORTS_EXECUT_DE
		                     , SEE.EVL_SE_CODE
	                      FROM (
	                            SELECT 
        		                       SEE.MBER_NO
        		                     , SEE.SPORTS_EXECUT_DE
        		                     , SEE.EVL_SE_CODE
        		                  FROM SPORTS_EXECUT_EVL SEE
        		                  LEFT JOIN ( 
        		                        SELECT 
        		                               MBER_NO
        		                             , SPORTS_EXECUT_DE
        		                             , EVL_SE_CODE
        		                          FROM SPORTS_EXECUT_EVL
        		                         WHERE MBER_NO = #{MBER_NO}
        		                           AND WGHTVAL IS NOT NULL
        		                           AND SPORTS_EXECUT_DE <![CDATA[ < ]]> DATE_FORMAT(NOW(), '%Y%m%d')
        		                         ORDER BY SPORTS_EXECUT_DE DESC
        		                         LIMIT 1
        		                     ) MSEE
        		                    ON SEE.MBER_NO = MSEE.MBER_NO
        		                   AND SEE.SPORTS_EXECUT_DE > MSEE.SPORTS_EXECUT_DE
        		                 WHERE SEE.MBER_NO = #{MBER_NO}
        		                   AND SEE.SPORTS_EXECUT_DE <![CDATA[ < ]]> DATE_FORMAT(NOW(), '%Y%m%d')
                             	 ORDER BY SEE.SPORTS_EXECUT_DE DESC
       		                 	 LIMIT 2
	                         ) SEE
	                     INNER JOIN (SELECT @RN := 0) R
	                     ORDER BY SEE.SPORTS_EXECUT_DE ASC
		             ) TBL
		         GROUP BY MBER_NO
		     ) SEE
	</select>

	<!-- 운동 실행 평가정보 상세 조회 -->	
	<select id="selectSportsExecutEvlInfo" parameterType="hmap" resultType="hmap">
		SELECT
			   MBER_NO
			 , SPORTS_EXECUT_DE
			 , EVL_SE_CODE
		  FROM SPORTS_EXECUT_EVL
		 WHERE MBER_NO = #{MBER_NO}
		   AND SPORTS_EXECUT_DE = DATE_FORMAT(NOW(), '%Y%m%d')
	</select>
	
	<!-- 운동 실행 평가정보 저장 -->
	<insert id="insertSportsExecutEvlInfo" parameterType="hmap">
		INSERT INTO SPORTS_EXECUT_EVL (
			   MBER_NO
			 , SPORTS_EXECUT_DE
			 , EVL_SE_CODE
			 , WGHTVAL
			 , REGIST_DT
		) VALUES (
			   #{MBER_NO}
			 , DATE_FORMAT(NOW(), '%Y%m%d')
			 , #{EVL_SE_CODE}
			 , #{WGHTVAL}
			 , NOW()
		)
	</insert>
	
	<!-- 운동 실행 평가정보 수정 -->
	<update id="updateSportsExecutEvlInfo" parameterType="hmap">
		UPDATE SPORTS_EXECUT_EVL SET
		       EVL_SE_CODE = #{EVL_SE_CODE}
		     , WGHTVAL = #{WGHTVAL}
		 WHERE MBER_NO = #{MBER_NO}
		   AND SPORTS_EXECUT_DE = #{SPORTS_EXECUT_DE}
	</update>
</mapper>